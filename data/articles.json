[
  {
    "id": 1,
    "title": "欢迎来到个人博客",
    "excerpt": "欢迎来到我的个人博客！这里将分享技术文章、生活感悟和学习心得。",
    "slug": "welcome-to-my-blog",
    "status": "published",
    "categories": ["公告", "个人"],
    "tags": ["欢迎", "博客", "介绍"],
    "date": "2024-01-15",
    "views": 128,
    "author": "博主",
    "content": "# 欢迎来到我的个人博客\n\n这是我的第一篇博客文章！在这里我会分享：\n\n## 技术文章 测试版\n- 前端开发经验\n- React 和 Node.js 教程\n- 编程最佳实践\n\n## 生活感悟\n- 日常思考\n- 读书笔记\n- 旅行见闻\n\n## 学习心得\n- 新技术探索\n- 项目经验总结\n- 问题解决方案\n\n感谢您访问我的博客，希望这些内容对您有所帮助！\n\n---\n\n*这是一篇使用 Markdown 格式编写的文章示例。*"
  },
  {
    "id": 2,
    "title": "React Hooks 完全指南",
    "excerpt": "深入了解 React Hooks 的使用方法和最佳实践，从基础到高级用法。",
    "slug": "react-hooks-guide",
    "status": "published",
    "categories": ["技术", "前端"],
    "tags": ["React", "Hooks", "JavaScript", "前端开发"],
    "date": "2024-01-10",
    "views": 256,
    "author": "博主",
    "content": "# React Hooks 完全指南\n\nReact Hooks 是 React 16.8 引入的重要特性，让我们能够在函数组件中使用状态和其他 React 特性。\n\n## 基础 Hooks\n\n### useState\n`useState` 是最常用的 Hook，用于在函数组件中添加状态：\n\n```javascript\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>你点击了 {count} 次</p>\n      <button onClick={() => setCount(count + 1)}>\n        点击我\n      </button>\n    </div>\n  );\n}\n```\n\n### useEffect\n`useEffect` 用于处理副作用，如数据获取、订阅或 DOM 操作：\n\n```javascript\nimport React, { useState, useEffect } from 'react';\n\nfunction UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchUser() {\n      try {\n        const response = await fetch(`/api/users/${userId}`);\n        const userData = await response.json();\n        setUser(userData);\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchUser();\n  }, [userId]); // 依赖数组\n\n  if (loading) return <div>加载中...</div>;\n  if (!user) return <div>用户不存在</div>;\n\n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <p>{user.email}</p>\n    </div>\n  );\n}\n```\n\n## 高级 Hooks\n\n### useContext\n用于消费 React Context：\n\n```javascript\nconst ThemeContext = React.createContext();\n\nfunction ThemedButton() {\n  const theme = useContext(ThemeContext);\n  return (\n    <button style={{ background: theme.background }}>\n      我是主题按钮\n    </button>\n  );\n}\n```\n\n### useReducer\n用于管理复杂状态逻辑：\n\n```javascript\nconst initialState = { count: 0 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    case 'reset':\n      return initialState;\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: 'reset' })}>\n        重置\n      </button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>\n        -\n      </button>\n      <button onClick={() => dispatch({ type: 'increment' })}>\n        +\n      </button>\n    </>\n  );\n}\n```\n\n## 自定义 Hooks\n\n自定义 Hooks 让我们能够重用状态逻辑：\n\n```javascript\nfunction useFetch(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setLoading(true);\n        const response = await fetch(url);\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n}\n\n// 使用自定义 Hook\nfunction PostList() {\n  const { data: posts, loading, error } = useFetch('/api/posts');\n\n  if (loading) return <div>加载中...</div>;\n  if (error) return <div>错误: {error.message}</div>;\n\n  return (\n    <ul>\n      {posts.map(post => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n## 最佳实践\n\n1. **只在顶层调用 Hooks** - 不要在循环、条件或嵌套函数中调用 Hooks\n2. **使用依赖数组** - 正确设置 useEffect 的依赖数组\n3. **避免无限循环** - 小心处理对象和数组依赖\n4. **自定义 Hooks 复用逻辑** - 提取重复的状态逻辑到自定义 Hooks\n\nReact Hooks 让函数组件变得更加强大和灵活，是现代 React 开发的核心！"
  },
  {
    "id": 3,
    "title": "Node.js 环境搭建与项目初始化",
    "excerpt": "详细介绍如何搭建 Node.js 开发环境，包括安装、配置和项目初始化的完整流程。",
    "slug": "nodejs-setup-guide",
    "status": "published",
    "categories": ["技术", "后端"],
    "tags": ["Node.js", "环境搭建", "开发工具", "npm"],
    "date": "2024-01-08",
    "views": 189,
    "author": "博主",
    "content": "# Node.js 环境搭建与项目初始化\n\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时，让我们能够在服务器端运行 JavaScript。本文将详细介绍如何搭建 Node.js 开发环境。\n\n## 安装 Node.js\n\n### 方法一：官网下载\n\n1. 访问 [Node.js 官网](https://nodejs.org/)\n2. 下载 LTS（长期支持）版本\n3. 运行安装程序并按照提示安装\n\n### 方法二：使用包管理器\n\n**macOS (使用 Homebrew):**\n```bash\nbrew install node\n```\n\n**Ubuntu/Debian:**\n```bash\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n\n**Windows (使用 Chocolatey):**\n```bash\nchoco install nodejs\n```\n\n### 方法三：使用 Node Version Manager (NVM)\n\nNVM 允许你安装和管理多个 Node.js 版本：\n\n**安装 NVM:**\n```bash\n# macOS/Linux\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n\n# 重启终端或运行\nsource ~/.bashrc\n```\n\n**使用 NVM:**\n```bash\n# 查看可用版本\nnvm list-remote\n\n# 安装最新 LTS 版本\nnvm install --lts\n\n# 使用特定版本\nnvm use 18.17.0\n\n# 设置默认版本\nnvm alias default 18.17.0\n```\n\n## 验证安装\n\n安装完成后，验证 Node.js 和 npm 是否正确安装：\n\n```bash\n# 检查 Node.js 版本\nnode --version\n# 或者\nnode -v\n\n# 检查 npm 版本\nnpm --version\n# 或者\nnpm -v\n```\n\n## 配置 npm\n\n### 设置镜像源（可选）\n\n如果下载速度较慢，可以设置淘宝镜像：\n\n```bash\n# 设置淘宝镜像\nnpm config set registry https://registry.npmmirror.com\n\n# 查看当前镜像\nnpm config get registry\n\n# 恢复官方镜像\nnpm config set registry https://registry.npmjs.org\n```\n\n### 全局包安装目录配置\n\n```bash\n# 查看全局包安装目录\nnpm config get prefix\n\n# 设置全局包安装目录（可选）\nnpm config set prefix \"C:\\nodejs\\npm-global\"  # Windows\nnpm config set prefix \"/usr/local\"           # macOS/Linux\n```\n\n## 创建第一个 Node.js 项目\n\n### 1. 创建项目目录\n\n```bash\nmkdir my-node-project\ncd my-node-project\n```\n\n### 2. 初始化项目\n\n```bash\n# 交互式初始化\nnpm init\n\n# 使用默认配置快速初始化\nnpm init -y\n```\n\n这会创建一个 `package.json` 文件：\n\n```json\n{\n  \"name\": \"my-node-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n### 3. 创建入口文件\n\n创建 `index.js` 文件：\n\n```javascript\n// index.js\nconsole.log('Hello, Node.js!');\n\n// 创建一个简单的 HTTP 服务器\nconst http = require('http');\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });\n  res.end('<h1>欢迎来到我的 Node.js 应用！</h1>');\n});\n\nserver.listen(port, () => {\n  console.log(`服务器运行在 http://localhost:${port}`);\n});\n```\n\n### 4. 运行项目\n\n```bash\nnode index.js\n```\n\n浏览器访问 `http://localhost:3000` 即可看到结果。\n\n## 常用开发工具和包\n\n### 开发依赖\n\n```bash\n# 安装 nodemon（自动重启开发服务器）\nnpm install --save-dev nodemon\n\n# 在 package.json 中添加脚本\n\"scripts\": {\n  \"start\": \"node index.js\",\n  \"dev\": \"nodemon index.js\"\n}\n```\n\n### 生产依赖示例\n\n```bash\n# Express 框架\nnpm install express\n\n# 环境变量管理\nnpm install dotenv\n\n# 日期处理\nnpm install moment\n\n# HTTP 请求\nnpm install axios\n```\n\n## Express 快速开始\n\n安装 Express 并创建一个基本的 Web 应用：\n\n```bash\nnpm install express\n```\n\n更新 `index.js`：\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\n// 中间件\napp.use(express.json());\napp.use(express.static('public'));\n\n// 路由\napp.get('/', (req, res) => {\n  res.send('<h1>欢迎来到 Express 应用！</h1>');\n});\n\napp.get('/api/users', (req, res) => {\n  res.json([\n    { id: 1, name: '张三', email: 'zhangsan@example.com' },\n    { id: 2, name: '李四', email: 'lisi@example.com' }\n  ]);\n});\n\napp.listen(port, () => {\n  console.log(`Express 应用运行在 http://localhost:${port}`);\n});\n```\n\n## 项目结构建议\n\n```\nmy-node-project/\n├── node_modules/     # 依赖包\n├── public/          # 静态文件\n├── src/             # 源代码\n│   ├── controllers/ # 控制器\n│   ├── models/      # 数据模型\n│   ├── routes/      # 路由\n│   └── utils/       # 工具函数\n├── tests/           # 测试文件\n├── .env             # 环境变量\n├── .gitignore       # Git 忽略文件\n├── package.json     # 项目配置\n└── README.md        # 项目说明\n```\n\n现在你已经成功搭建了 Node.js 开发环境，可以开始愉快的服务器端 JavaScript 开发之旅了！"
  },
  {
    "id": 4,
    "title": "我的编程学习之路",
    "excerpt": "分享我从编程小白到开发者的成长经历，以及学习过程中的心得体会和经验总结。",
    "slug": "my-programming-journey",
    "status": "published",
    "categories": ["个人", "经验分享"],
    "tags": ["编程", "学习", "成长", "经验"],
    "date": "2024-01-05",
    "views": 342,
    "author": "博主",
    "content": "# 我的编程学习之路\n\n回首我的编程学习历程，从最初的迷茫困惑到现在能够独立开发项目，这一路走来收获颇多，也踩过不少坑。今天想和大家分享一下我的学习经历和心得体会。\n\n## 起步阶段：迷茫与困惑\n\n### 初次接触\n\n我第一次接触编程是在大学的计算机基础课上，那时候学的是C语言。还记得第一次看到代码时的困惑：\n\n```c\n#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\");\n    return 0;\n}\n```\n\n当时完全不理解这些符号和单词的含义，只是机械地照着书本敲代码。每当程序能够运行时，心中会有一种莫名的成就感，但更多的时候是挫败感。\n\n### 遇到的困难\n\n1. **语法错误频繁** - 忘记分号、括号不匹配等基础错误\n2. **逻辑思维薄弱** - 无法将问题分解为可执行的步骤\n3. **学习方法不当** - 只注重语法，忽视了编程思维的培养\n4. **缺乏实践** - 只做课本习题，没有真实项目经验\n\n## 成长阶段：方法与实践\n\n### 找到正确的学习方法\n\n经过一段时间的摸索，我总结出了一些有效的学习方法：\n\n#### 1. 理论与实践结合\n\n不再只是看书学理论，而是：\n- 学完一个概念立即编写代码验证\n- 通过小项目巩固所学知识\n- 模仿优秀的开源项目\n\n#### 2. 建立知识体系\n\n```\n编程基础\n├── 数据结构\n│   ├── 数组、链表\n│   ├── 栈、队列\n│   └── 树、图\n├── 算法\n│   ├── 排序算法\n│   ├── 搜索算法\n│   └── 动态规划\n└── 设计模式\n    ├── 单例模式\n    ├── 工厂模式\n    └── 观察者模式\n```\n\n#### 3. 加入技术社区\n\n- **GitHub** - 阅读优秀代码，参与开源项目\n- **Stack Overflow** - 解决技术问题\n- **技术博客** - 学习他人经验，分享自己心得\n- **线下聚会** - 与同行交流，扩展人脉\n\n### 技术栈的选择\n\n根据兴趣和市场需求，我选择了前端开发方向：\n\n**基础三件套：**\n- **HTML** - 页面结构\n- **CSS** - 样式设计\n- **JavaScript** - 交互逻辑\n\n**框架和库：**\n- **React** - 组件化开发\n- **Vue** - 渐进式框架\n- **Node.js** - 服务器端JavaScript\n\n**开发工具：**\n- **VS Code** - 代码编辑器\n- **Git** - 版本控制\n- **Chrome DevTools** - 调试工具\n\n## 突破阶段：项目与经验\n\n### 第一个完整项目\n\n我的第一个完整项目是一个个人博客网站，虽然功能简单，但让我学会了：\n\n1. **项目规划** - 需求分析、技术选型、架构设计\n2. **代码组织** - 模块化、组件化开发\n3. **问题解决** - 调试技巧、查阅文档\n4. **部署上线** - 服务器配置、域名绑定\n\n### 技能提升的关键点\n\n#### 1. 阅读优秀代码\n\n我会定期阅读知名开源项目的源码，如：\n- **React** - 学习组件设计思想\n- **Vue** - 理解响应式原理\n- **Express** - 掌握中间件模式\n\n#### 2. 写技术博客\n\n通过写博客，我不仅巩固了所学知识，还提高了：\n- **技术表达能力**\n- **知识总结能力**\n- **问题分析能力**\n\n#### 3. 参与开源项目\n\n贡献开源项目让我学会了：\n- **团队协作**\n- **代码规范**\n- **Code Review**\n- **文档编写**\n\n## 深入阶段：专业与深度\n\n### 专业技能提升\n\n随着经验的积累，我开始关注更深层次的技术：\n\n#### 1. 性能优化\n\n- **页面加载优化** - 代码分割、懒加载\n- **渲染优化** - 虚拟滚动、防抖节流\n- **网络优化** - CDN、缓存策略\n\n#### 2. 工程化建设\n\n- **构建工具** - Webpack、Vite\n- **代码质量** - ESLint、Prettier\n- **自动化** - CI/CD、自动化测试\n\n#### 3. 架构设计\n\n- **模块化设计**\n- **微前端架构**\n- **状态管理**\n- **接口设计**\n\n### 软技能培养\n\n除了技术能力，我也注重软技能的培养：\n\n1. **沟通能力** - 与产品、设计、后端的有效沟通\n2. **学习能力** - 快速掌握新技术的能力\n3. **问题解决能力** - 分析问题、定位问题、解决问题\n4. **时间管理** - 合理规划学习和工作时间\n\n## 心得体会\n\n### 学习建议\n\n1. **打好基础** - 不要急于求成，基础知识很重要\n2. **多写代码** - 纸上得来终觉浅，绝知此事要躬行\n3. **坚持学习** - 技术更新快，要保持学习的习惯\n4. **勇于尝试** - 不怕犯错，在错误中学习成长\n5. **善于总结** - 定期回顾和总结，形成自己的知识体系\n\n### 给初学者的话\n\n如果你正在编程的路上迷茫，我想告诉你：\n\n- **每个人都有自己的节奏** - 不要和别人比较\n- **困难是暂时的** - 坚持下去就会看到曙光\n- **实践出真知** - 多动手，少空想\n- **社区是宝藏** - 善用技术社区的力量\n\n## 未来展望\n\n编程学习是一个永无止境的过程，我的下一步计划是：\n\n1. **深入学习** - 算法、数据结构、系统设计\n2. **技术广度** - 了解更多技术栈和解决方案\n3. **分享传承** - 通过博客、教程帮助更多人\n4. **产品思维** - 不仅仅是写代码，更要思考产品和用户\n\n编程改变了我的思维方式，让我学会了用逻辑思考问题，用代码解决问题。这条路虽然不容易，但充满了挑战和乐趣。\n\n希望我的经历能给正在学习编程的朋友们一些启发和鼓励。让我们一起在编程的世界里探索、成长、创造！\n\n---\n\n*如果你也有编程学习的经历想要分享，欢迎在评论区留言交流！*"
  }
]